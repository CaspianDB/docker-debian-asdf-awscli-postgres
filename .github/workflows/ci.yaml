name: CI

on:
  push:
    branches:
      - "*"
    paths-ignore:
      - ".gitignore"
      - "LICENSE"
      - "README.md"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  docker:
    permissions:
      id-token: write
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare environment variables
        run: cat .github/.env >> $GITHUB_ENV

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Configure AWS Credentials
        if: github.event_name != 'pull_request'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR Public
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Check latest Debian with asdf image
        run: |
          echo DEBIAN_ASDF_TAG=$(docker run --rm gcr.io/go-containerregistry/crane ls caspiandb/debian-asdf | grep -P '^bullseye-[0-9]+-' | sort -r | head -n1) | tee -a $GITHUB_ENV

      - name: Prepare new release tag
        run: echo IMAGE_TAG=${DEBIAN_ASDF_TAG%-asdf-*}$(cat .tool-versions | while read plugin version; do echo -n "-$plugin-$version"; done) | tee -a $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKER_REPO }}
          tags: |
            type=edge
            type=raw,prefix=build-,value=${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
            type=sha
            type=ref,event=branch
            type=ref,event=pr
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.vendor=${{ env.IMAGE_VENDOR }}
            org.opencontainers.image.version=${{ env.IMAGE_TAG }}

      - name: Build and push
        uses: int128/kaniko-action@v1
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DEBIAN_ASDF_TAG=${{ env.DEBIAN_ASDF_TAG }}
          kaniko-args: |
            --tarPath=/kaniko/action/output/image.tar
            --single-snapshot
            --skip-unused-stages
            --snapshotMode=redo
            --use-new-run

      - name: Reuse built image
        run: docker load -i /tmp/kaniko-action-*/image.tar

      - name: Test built image
        run: |
          docker run --rm -t ${DOCKER_REPO}:edge aws --version | grep ^aws-cli/
          docker run --rm -t ${DOCKER_REPO}:edge psql --version | grep ^psql

      - name: Retag
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag ${DOCKER_REPO}:edge ${DOCKER_REPO}:${IMAGE_TAG}
          docker tag ${DOCKER_REPO}:edge ${DOCKER_REPO}:latest
          docker tag ${DOCKER_REPO}:edge ${AWS_ECR_REPO}:${IMAGE_TAG}
          docker tag ${DOCKER_REPO}:edge ${AWS_ECR_REPO}:latest

      - name: Push
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ${DOCKER_REPO}:${IMAGE_TAG}
          docker push ${DOCKER_REPO}:latest
          docker push ${AWS_ECR_REPO}:${IMAGE_TAG}
          docker push ${AWS_ECR_REPO}:latest

      - name: Create new git tag
        if: github.ref == 'refs/heads/main'
        run: |
          git tag -f ${IMAGE_TAG}
          git push -f origin ${IMAGE_TAG}
